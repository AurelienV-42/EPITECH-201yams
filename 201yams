#!/usr/bin/env python3

import sys
import math
import argparse

def manageHelpFlag():
    if (len(sys.argv) != 7 and len(sys.argv) != 2):
        sys.exit(84)
    if (sys.argv[1] == "-h"):
        print("USAGE")
        print("             ./201yams d1 d2 d3 d4 d5 c")
        print("\nDESCRIPTION")
        print("             d1  value of the first die (0 if not thrown)")
        print("             d2  value of the second die (0 if not thrown)")
        print("             d3  value of the third die (0 if not thrown)")
        print("             d4  value of the fourth die (0 if not thrown)")
        print("             d5  value of the fifth die (0 if not thrown)")
        print("             c   expected combination")
        sys.exit(0)

def check_combination(array):

    possibleCombinations = ["pair", "three", "four", "full", "straight", "yams"]

    for i in range(0, len(possibleCombinations)):
        if array[0] == possibleCombinations[i]:
            if possibleCombinations[i] != "full" and len(array) >= 3:
                sys.exit(84)
            elif possibleCombinations[i] == "full" and len(array) < 3:
                sys.exit(84)
            return 0
    sys.exit(84)

def check_A_B(array):

    for i in range(1, len(array)):
        if (array[i].isdigit() == True):
            if (array[i] <= '0') or (array[i] > '6'):
                sys.exit(84)
        else:
            sys.exit(84)

def count_straight(array, number, max_number):
    i = number - max_number + 1
    nb_occurence = 0
    while i <= number:
        if array.count(i) > 0:
            nb_occurence += 1
        i += 1
    return nb_occurence

def binomial_law(n, k, p):
    coef_binomial = math.factorial(n) / (math.factorial(n - k) * math.factorial(k))
    return coef_binomial * (p ** k) * ((1 - p) ** (n - k))

def full(array, number_a, number_b):
    nb_occurence_a = 3 if array.count(number_a) > 3 else array.count(number_a)
    nb_occurence_b = 2 if array.count(number_b) > 2 else array.count(number_b)
    n = 5 - (nb_occurence_a + nb_occurence_b)
    if n >= 2:
        coef_binomial = math.factorial(n) / (math.factorial(n - 2) * math.factorial(2))
        return coef_binomial / (6 ** (5 - nb_occurence_a + nb_occurence_b))
    if n == 1:
        return 1 / 6
    else:
        return 1

def game(args, k, number_a, number_b = 0):
    array = [args.d1, args.d2, args.d3, args.d4, args.d5]
    if array.count(0) > 0 and array.count(0) < 5:
        sys.exit(84)
    for i in array:
        if i < 0 or i > 6:
            sys.exit(84)
    max_number = 5
    if k == 6:
        if number_a < 5:
            sys.exit(84)
        nb_occurence = count_straight(array, number_a, max_number)
        k -= 1
    elif k == 7:
        return full(array, number_a, number_b)
    else:
        nb_occurence = array.count(number_a)
    if nb_occurence >= k:
        return 1
    p = 1 / 6
    n = max_number - nb_occurence
    return_value = 0
    i = k - nb_occurence
    while n >= i and n - i >= 0:
        return_value += binomial_law(n, i, p)
        i += 1
    return return_value

def disp(proba, combination, combinationNumbers):

    if (combination == "full"):
        fullCombination = str(combinationNumbers[1]) + " " + combination + " of " + str(combinationNumbers[2])
    else:
        fullCombination = str(combinationNumbers[1]) + " " + combination
    if (combination == "three" or combination == "four"):
        print("chances to get a ", fullCombination, "-of-a-kind:  ", "%.2f"%(proba * 100), "%", sep='')
    else:
        print("chances to get a ", fullCombination, ":  ", "%.2f"%(proba * 100), "%", sep='')

def my_parser():
    parser = argparse.ArgumentParser(description='Sample argparse py', usage=manageHelpFlag())
    parser.add_argument("d1", type=int)
    parser.add_argument("d2", type=int)
    parser.add_argument("d3", type=int)
    parser.add_argument("d4", type=int)
    parser.add_argument("d5", type=int)
    parser.add_argument("c", type=str)
    return parser.parse_args()

def yams():
    try:
        args = my_parser()
    except:
        sys.exit(84)
    c = args.c
    combinationsDigits = [["pair", 2], ["three", 3], ["four", 4], ["yams", 5], ["straight", 6], ["full", 7]]
    array = c.split('_')
    if (len(array) > 3):
        sys.exit(84)
    check_combination(array)
    check_A_B(array)
    fullCombination = []
    for j in range(0, len(combinationsDigits)):
        if array[0] == combinationsDigits[j][0]:
            fullCombination.append(combinationsDigits[j][1])
            break
    for i in range(1, len(array)):
        fullCombination.append(int(array[i]))
    if (len(fullCombination) == 2):
        proba = game(args, fullCombination[0], fullCombination[1])
    elif (len(fullCombination) == 3):
        if fullCombination[1] == fullCombination[2]:
            sys.exit(84)
        proba = game(args, fullCombination[0], fullCombination[1], fullCombination[2])
    disp(proba, array[0], fullCombination)

def main():
    yams()
    sys.exit(0)

main()
